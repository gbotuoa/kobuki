/*********************************************************************
* Software License Agreement (BSD License)
* 
*  Copyright (c) 2008, Willow Garage, Inc.
*  All rights reserved.
* 
*  Redistribution and use in source and binary forms, with or without
*  modification, are permitted provided that the following conditions
*  are met:
* 
*   * Redistributions of source code must retain the above copyright
*     notice, this list of conditions and the following disclaimer.
*   * Redistributions in binary form must reproduce the above
*     copyright notice, this list of conditions and the following
*     disclaimer in the documentation and/or other materials provided
*     with the distribution.
*   * Neither the name of the Willow Garage nor the names of its
*     contributors may be used to endorse or promote products derived
*     from this software without specific prior written permission.
* 
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
*  POSSIBILITY OF SUCH DAMAGE.
*********************************************************************/
#include <ros/ros.h>

#include <leg_tracker/laser_processor.h>
#include <leg_tracker/calc_leg_features.h>

#include <opencv/cxcore.h>
#include <opencv/cv.h>
#include <opencv/ml.h>

//#include <people_msgs/PositionMeasurement.h>
//#include <people_msgs/PositionMeasurementArray.h>
#include <sensor_msgs/LaserScan.h>

#include <geometry_msgs/PoseArray.h>

#include <tf/transform_listener.h>
#include <tf/message_filter.h>
#include <message_filters/subscriber.h>

#include <visualization_msgs/Marker.h>

#include <algorithm>

using namespace std;
using namespace laser_processor;
using namespace ros;
using namespace tf;



const int MIN_POINTS_PER_CLUSTER = 3;
const double CONNECTED_THRESH = 0.13;  // 0.3;


class DetectLegClusters
{
public:
  TransformListener tfl_;

  ScanMask mask_;

  int mask_count_;

  CvRTrees forest;

  int feat_count_;

  ros::NodeHandle nh_;
  ros::Publisher markers_pub_;
  ros::Publisher detected_leg_clusters_pub_;
  ros::Subscriber scan_sub_;

  string laser_frame_;
  string fixed_frame_;
  double detection_threshold_;

  DetectLegClusters(int argc, char **argv)
  {
    if (argc == 6)
    {
      forest.load(argv[1]);
      feat_count_ = forest.get_active_var_mask()->cols;
      printf("Loaded forest with %d features from %s\n", feat_count_, argv[1]);

      string scan_topic = argv[2];
      scan_sub_ =  nh_.subscribe(scan_topic, 10, &DetectLegClusters::laserCallback, this);  // TODO can we dynamically configure the topic name?
  
      laser_frame_ = argv[3]; 
      fixed_frame_ = argv[4];
      detection_threshold_ = atof(argv[5]);
 
      markers_pub_ = nh_.advertise<visualization_msgs::Marker>("visualization_marker", 20);
      detected_leg_clusters_pub_ = nh_.advertise<geometry_msgs::PoseArray>("detected_leg_clusters",20);
    }
    else
      ROS_ERROR("incorrect number of arguments passed in when detect_leg_clusters node was launched");
  }


  ~DetectLegClusters()
  {
  }

 
  void laserCallback(const sensor_msgs::LaserScan::ConstPtr& scan)
  { 
     bool can_transform = tf::TransformListener::canTransform (fixed_frame_, laser_frame_, )

  
  
//    tfl_.waitForTransform(laser_frame_, fixed_frame_, scan->header.stamp, ros::Duration(1.0)); //ros::Time(), ros::Duration(1.0));
  
    ScanProcessor processor(*scan, mask_);

    processor.splitConnected(CONNECTED_THRESH);
    processor.removeLessThan(MIN_POINTS_PER_CLUSTER);

    CvMat* tmp_mat = cvCreateMat(1,feat_count_,CV_32FC1);
   
    geometry_msgs::PoseArray leg_cluster_positions;
    leg_cluster_positions.header.frame_id = laser_frame_;

    int id_num = 0;
    for (list<SampleSet*>::iterator i = processor.getClusters().begin();
         i != processor.getClusters().end();
         i++)
    {   
      vector<float> f = calcLegFeatures(*i, *scan);

      for (int k = 0; k < feat_count_; k++)
        tmp_mat->data.fl[k] = (float)(f[k]);

      float probability_of_leg = forest.predict_prob( tmp_mat );
      bool prediction;
      if (probability_of_leg > detection_threshold_)
        prediction = 1;
      else  
        prediction = 0;
                      
      if (prediction)
      {
        Stamped<Point> loc((*i)->center(), scan->header.stamp, scan->header.frame_id);

//        // Filter out clusters that are from the scans hitting the wheelchair
//        if (loc[0] < 0 and loc[0] > -1.0 and loc[1] < 0 and loc[1] > -1.0)
//          continue;
//          
//        try {
//          tfl_.transformPoint(fixed_frame_, loc, loc);
//        } catch(tf::TransformException& ex) {
//          ROS_ERROR("Received an exception trying to transform at spot 3: %s", ex.what());
//        }

        visualization_msgs::Marker m;
        m.header.stamp = scan->header.stamp;
        m.header.frame_id = fixed_frame_;
        m.ns = "LEGS";
        m.id = id_num;
        m.type = m.SPHERE;
        m.pose.position.x = loc[0];
        m.pose.position.y = loc[1];
        m.pose.position.z = loc[2];

        m.scale.x = 0.13;
        m.scale.y = 0.13;
        m.scale.z = 0.13;
        m.color.a = 1;
        m.lifetime = ros::Duration(0.2);
      
        m.color.r = 0;
        m.color.g = probability_of_leg;
        m.color.b = probability_of_leg;

        markers_pub_.publish(m);
        id_num++;

        geometry_msgs::Pose new_leg_cluster_position;
        new_leg_cluster_position.position.x = loc[0];
        new_leg_cluster_position.position.y = loc[1];
        new_leg_cluster_position.position.z = probability_of_leg; // NOTE: overloading the z position to actually store the probability of the cluster being a leg
        leg_cluster_positions.poses.push_back(new_leg_cluster_position);
      }
    }

    detected_leg_clusters_pub_.publish(leg_cluster_positions);
  }
};

int main(int argc, char **argv)
{
  ros::init(argc, argv,"detect_leg_clusters");

  DetectLegClusters dlc(argc, argv);

  ros::spin();
  
  return 0;
}

